# bot/handlers/search.py
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é –∏ –∞—Ä—Ç–∏–∫—É–ª—É
# –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞, –ø–∞–≥–∏–Ω–∞—Ü–∏—è –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –¥—É–±–ª–∏—Ä—É—é—Ç –º–æ–Ω–æ–ª–∏—Ç–Ω—ã–π bot.py

import logging
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton

from bot.utils.db_utils import search_items, is_admin
from bot.keyboards.inline import get_back_main_keyboard, get_products_keyboard

router = Router()
logger = logging.getLogger(__name__)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
def format_product(product, show_bs=False):
    parts = []
    if show_bs:
        parts.append(f"–ë–°‚Ññ: {product.bs_number}")
    parts.extend([
        f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {product.product_name}",
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.category or '-'}",
        f"–ì–æ—Ä–æ–¥: {product.region.city}",
        f"–†–µ–≥–∏–æ–Ω: {product.region.region}",
        f"–¶–µ–Ω–∞: {product.price:,.2f} ‚ÇΩ" if product.price is not None else "–¶–µ–Ω–∞: ‚Äì",
        f"–ê—Ä—Ç–∏–∫—É–ª: {product.product_name.split()[0]}"
    ])
    return "\n".join(parts)

# –ö–æ–º–∞–Ω–¥–∞ /search ‚Äì –Ω–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞
@router.message(Command("search"))
async def cmd_search(message: types.Message):
    await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    logger.info(f"[search] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ ‚Äì –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
@router.message(lambda msg: msg.text and not msg.text.startswith("/"))
async def process_search_query(message: types.Message):
    query = message.text.strip()
    logger.info(f"[search] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∏—â–µ—Ç: '{query}'")
    results = search_items(query)
    if not results:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=get_back_main_keyboard())
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
    page = results[:5]
    show_bs = is_admin(message.from_user.id)
    text = "\n\n".join([f"üîπ {format_product(p, show_bs)}" for p in page])

    kb = get_products_keyboard(
        filter_type="search",
        filter_value=query,
        offset=5,
        limit=5
    )
    await message.answer(
        f"üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '<b>{query}</b>':\n\n{text}",
        reply_markup=kb
    )

# –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
@router.callback_query(F.data.startswith("search_next:"))
async def search_next(callback: types.CallbackQuery):
    await callback.answer()
    _, query, offset = callback.data.split(":", 2)
    offset = int(offset)
    logger.info(f"[search] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ª–∏—Å—Ç–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã '{query}', offset={offset}")
    results = search_items(query)
    page = results[offset:offset+5]
    if not page:
        await callback.answer("üì≠ –ë–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    show_bs = is_admin(callback.from_user.id)
    text = "\n\n".join([f"üîπ {format_product(p, show_bs)}" for p in page])
    kb = get_products_keyboard(
        filter_type="search",
        filter_value=query,
        offset=offset+5,
        limit=5
    )
    await callback.message.edit_text(
        f"üîé –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É '<b>{query}</b>':\n\n{text}",
        reply_markup=kb
    )
