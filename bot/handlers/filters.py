# bot/handlers/filters.py
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º, –≥–æ—Ä–æ–¥–∞–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
# –ü–æ–ª–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥—É–±–ª–∏—Ä—É–µ—Ç –º–æ–Ω–æ–ª–∏—Ç–Ω—ã–π bot.py, –≤–∫–ª—é—á–∞—è —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–æ–≤ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—é

import logging
from aiogram import Router, types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton

from bot.keyboards.inline import get_back_main_keyboard, get_products_keyboard

from bot.utils.db_utils import (
    get_all_regions,
    get_cities_for_region,
    get_categories_for_region_city,
    get_products_by_filter,
    is_admin
)

router = Router()
logger = logging.getLogger(__name__)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ –æ–±—Ä–∞–∑—Ü—É –º–æ–Ω–æ–ª–∏—Ç–∞
def format_product(product, show_bs=False):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç SaleData –≤ —Ç–µ–∫—Å—Ç:
    –ë–°‚Ññ (–µ—Å–ª–∏ –∞–¥–º–∏–Ω), –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, –ö–∞—Ç–µ–≥–æ—Ä–∏—è, –ì–æ—Ä–æ–¥, –†–µ–≥–∏–æ–Ω, –¶–µ–Ω–∞, –ê—Ä—Ç–∏–∫—É–ª
    """
    parts = []
    if show_bs:
        parts.append(f"–ë–°‚Ññ: {product.bs_number}")
    parts.extend([
        f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {product.product_name}",
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.category or '-'}",
        f"–ì–æ—Ä–æ–¥: {product.region.city}",
        f"–†–µ–≥–∏–æ–Ω: {product.region.region}",
        f"–¶–µ–Ω–∞: {product.price:,.2f} ‚ÇΩ" if product.price is not None else "–¶–µ–Ω–∞: ‚Äì",
        f"–ê—Ä—Ç–∏–∫—É–ª: {product.product_name.split()[0]}"
    ])
    return "\n".join(parts)

# –≠—Ç–∞–ø 1: –≤—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞
@router.callback_query(lambda c: c.data == "menu_filter")
async def start_filter(callback: types.CallbackQuery):
    await callback.answer()
    logger.info(f"[filters] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é")
    regions = get_all_regions()
    builder = InlineKeyboardBuilder()
    for r in regions:
        builder.button(text=r, callback_data=f"filter_region:{r}")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="nav_home")
    builder.adjust(2)
    await callback.message.edit_text("üåç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:", reply_markup=builder.as_markup())

# –≠—Ç–∞–ø 2: –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
@router.callback_query(lambda c: c.data.startswith("filter_region:"))
async def filter_region(callback: types.CallbackQuery):
    await callback.answer()
    region = callback.data.split(":",1)[1]
    logger.info(f"[filters] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–µ–≥–∏–æ–Ω: {region}")
    cities = get_cities_for_region(region)
    builder = InlineKeyboardBuilder()
    for city in cities:
        builder.button(text=city, callback_data=f"filter_city:{region}:{city}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_filter")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="nav_home")
    builder.adjust(2)
    await callback.message.edit_text(
        f"üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ —Ä–µ–≥–∏–æ–Ω–µ <b>{region}</b>:",
        reply_markup=builder.as_markup()
    )

# –≠—Ç–∞–ø 3: –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(lambda c: c.data.startswith("filter_city:"))
async def filter_city(callback: types.CallbackQuery):
    await callback.answer()
    _, region, city = callback.data.split(":",2)
    logger.info(f"[filters] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥: {city} (—Ä–µ–≥–∏–æ–Ω: {region})")
    categories = get_categories_for_region_city(region, city)
    builder = InlineKeyboardBuilder()
    for cat in categories:
        builder.button(text=cat, callback_data=f"filter_category:{region}:{city}:{cat}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"filter_region:{region}")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="nav_home")
    builder.adjust(2)
    await callback.message.edit_text(
        f"üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –≥–æ—Ä–æ–¥–µ <b>{city}</b> (—Ä–µ–≥–∏–æ–Ω: <b>{region}</b>):",
        reply_markup=builder.as_markup()
    )

# –≠—Ç–∞–ø 4: –≤—ã–≤–æ–¥ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É
@router.callback_query(lambda c: c.data.startswith("filter_category:"))
async def filter_category(callback: types.CallbackQuery):
    await callback.answer()
    _, region, city, category = callback.data.split(":",3)
    logger.info(f"[filters] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category} –≤ {city}, {region}")
    products = get_products_by_filter(region=region, city=city, category=category, limit=5, offset=0)
    if not products:
        await callback.message.edit_text(
            f"‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ —Ñ–∏–ª—å—Ç—Ä—É: <b>{category}</b> –≤ <b>{city}, {region}</b>",
            reply_markup=get_back_main_keyboard()
        )
        return
    show_bs = is_admin(callback.from_user.id)
    text = "\n\n".join([f"üîπ {format_product(p, show_bs)}" for p in products])
    builder = get_products_keyboard(
        filter_type="filter",
        filter_value=f"{region}|{city}|{category}",
        offset=5,
        limit=5
    )
    await callback.message.edit_text(
        f"‚öôÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ñ–∏–ª—å—Ç—Ä—É <b>{category}</b> –≤ <b>{city}, {region}</b>:\n\n{text}",
        reply_markup=builder
    )

# –≠—Ç–∞–ø 5: –ø–∞–≥–∏–Ω–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
@router.callback_query(lambda c: c.data.startswith("filter_next:"))
async def filter_next(callback: types.CallbackQuery):
    await callback.answer()
    _, region, city, category, offset = callback.data.split(":",4)
    offset = int(offset)
    logger.info(f"[filters] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏—Å—Ç–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä {category} –≤ {city}, {region}, offset={offset}")
    products = get_products_by_filter(region=region, city=city, category=category, limit=5, offset=offset)
    if not products:
        await callback.answer("üì≠ –ë–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return
    show_bs = is_admin(callback.from_user.id)
    text = "\n\n".join([f"üîπ {format_product(p, show_bs)}" for p in products])
    builder = get_products_keyboard(
        filter_type="filter",
        filter_value=f"{region}|{city}|{category}",
        offset=offset+5,
        limit=5
    )
    await callback.message.edit_text(
        f"‚öôÔ∏è –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É <b>{category}</b> –≤ <b>{city}, {region}</b>:\n\n{text}",
        reply_markup=builder
    )
