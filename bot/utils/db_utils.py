# db_utils.py

import pandas as pd
import logging
from sqlalchemy.orm import Session, joinedload
from sqlalchemy import or_
from db.database import engine, SessionLocal
from db.models import Region, Store, SaleData
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–æ–≤
data_df = pd.read_excel("data/data.xlsx")
regions_df = pd.read_excel("data/city_regions.xlsx")
stores_df = pd.read_excel("data/store_addresses.xlsx")


# –£—Ç–∏–ª–∏—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫
def safe_strip(val):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç .strip(), –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∞"""
    return str(val).strip() if pd.notna(val) else ""


# –°–ª–æ–≤–∞—Ä–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
city_to_region = {
    safe_strip(row["–ì–æ—Ä–æ–¥"]): (safe_strip(row["–†–µ–≥–∏–æ–Ω"]), safe_strip(row["–û–∫—Ä—É–≥"]))
    for _, row in regions_df.iterrows()
    if pd.notna(row["–ì–æ—Ä–æ–¥"])
}

store_info = {
    safe_strip(row["–ú–∞–≥–∞–∑–∏–Ω"]): (safe_strip(row["–ì–æ—Ä–æ–¥"]), safe_strip(row["–ê–¥—Ä–µ—Å"]))
    for _, row in stores_df.iterrows()
    if pd.notna(row["–ú–∞–≥–∞–∑–∏–Ω"])
}


def import_data():
    db: Session = SessionLocal()
    try:
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        db.query(SaleData).delete()
        db.query(Store).delete()
        db.query(Region).delete()
        db.commit()

        logger.info("üì• –ò–º–ø–æ—Ä—Ç —Ä–µ–≥–∏–æ–Ω–æ–≤...")
        region_cache = {}
        for city, (region, district) in city_to_region.items():
            r = Region(city=city, region=region, district=district)
            db.add(r)
            region_cache[city] = r
        db.commit()
        logger.info(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: {len(region_cache)}")

        logger.info("üì¶ –ò–º–ø–æ—Ä—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤...")
        store_cache = {}
        for code, (city, address) in store_info.items():
            region = region_cache.get(city)
            if not region:
                logger.warning(f"‚ö†Ô∏è –ì–æ—Ä–æ–¥ {city} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ —Ä–µ–≥–∏–æ–Ω–æ–≤.")
                continue
            s = Store(store_code=code, city=city, address=address, region=region)
            db.add(s)
            store_cache[code] = s
        db.commit()
        logger.info(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –º–∞–≥–∞–∑–∏–Ω–æ–≤: {len(store_cache)}")

        logger.info("üíæ –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–¥–∞–∂...")
        added_sales = 0
        for _, row in data_df.iterrows():
            code = safe_strip(row.get("–ö–æ–¥ –º–∞–≥–∞–∑–∏–Ω–∞"))
            store = store_cache.get(code)
            if not store:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –º–∞–≥–∞–∑–∏–Ω —Å –∫–æ–¥–æ–º: {code}")
                continue

            try:
                price = float(row.get("–¶–µ–Ω–∞"))
            except:
                price = None

            try:
                date = pd.to_datetime(row.get("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è"))
            except:
                date = None

            sale = SaleData(
                bs_number=safe_strip(row.get("–ù–æ–º–µ—Ä –ë–°")),
                product_name=safe_strip(row.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ")),
                category=safe_strip(row.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è")),
                price=price,
                end_date=date,
                store=store,
                region=store.region
            )
            db.add(sale)
            added_sales += 1
        db.commit()
        logger.info(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ–¥–∞–∂: {added_sales}")

    finally:
        db.close()
        logger.info("üîí –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ.")


# üöÄ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–æ–∏—Å–∫–∞

def get_all_categories():
    db = SessionLocal()
    try:
        categories = db.query(SaleData.category).distinct().all()
        return sorted({c[0] for c in categories if c[0]})
    finally:
        db.close()


def get_all_regions():
    db = SessionLocal()
    try:
        regions = db.query(Region.region).distinct().all()
        return sorted({r[0] for r in regions if r[0]})
    finally:
        db.close()


def search_items(query: str = "", category: str = None, region: str = None, limit: int = 5, offset: int = 0):
    db = SessionLocal()
    try:
        q = db.query(SaleData).options(joinedload(SaleData.region))

        if query:
            q = q.filter(
                or_(
                    SaleData.product_name.ilike(f"%{query}%"),
                    SaleData.bs_number.ilike(f"%{query}%")
                )
            )

        if category:
            q = q.filter(SaleData.category == category)

        if region:
            q = q.join(SaleData.region).filter(Region.region == region)

        results = (
            q.order_by(SaleData.price.desc())
            .offset(offset)
            .limit(limit)
            .all()
        )
        return results
    finally:
        db.close()


# –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
if __name__ == "__main__":
    import_data()
