# main.py
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π —Ä–æ—É—Ç–µ—Ä–æ–≤ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º

import asyncio
import logging
import os
import sys

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º import_data –∏–∑ –º–æ–¥—É–ª—è importer
from importer.import_data import import_data  # –§—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
from bot.handlers import routers  # –°–ø–∏—Å–æ–∫ —Ä–æ—É—Ç–µ—Ä–æ–≤: filters, search, user

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: INFO-—É—Ä–æ–≤–µ–Ω—å –∏ —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()


async def run_bot():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤.
    """
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    if not BOT_TOKEN:
        logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ!")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å HTML-–ø–∞—Ä—Å–∏–Ω–≥–æ–º
    bot = Bot(
        token=BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–º—è—Ç—å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ Redis)
    dp = Dispatcher(storage=MemoryStorage())

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ handlers
    for router in routers:
        dp.include_router(router)
        logger.debug(f"–†–æ—É—Ç–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {router}")

    try:
        logger.info("‚ñ∂ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç polling...")
        await dp.start_polling(bot)
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        await bot.session.close()
        logger.info("‚õî –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def update_database():
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: –∏–º–ø–æ—Ä—Ç –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
    """
    logger.info("üì• –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î...")
    import_data()
    logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")


if __name__ == "__main__":
    # –ß—Ç–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (update/runbot)
    command = sys.argv[1] if len(sys.argv) > 1 else None

    if command == "update":
        update_database()
    elif command == "runbot":
        asyncio.run(run_bot())
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö + –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
        update_database()
        asyncio.run(run_bot())
